#include "AI.h"
#include "Rule.h"
#include <iostream>
#include <string>
using namespace std;
int main() {
	Rule rule;
	int test[][9] = {
		0,0,1,1,1,1,1,0,0,//连5 2
		0,1,1,1,1,1,0,0,0,//连5 2
		1,1,1,1,1,0,0,0,0,//连5 2
		0,0,0,1,1,1,1,1,0,//连5 2
		0,0,0,0,1,1,1,1,1,//连5 2
		//中心线5连 且外部随意 √
		//共5种

		0,0,1,1,1,1,0,0,0,//活4 3
		0,0,0,1,1,1,1,0,0,//活4 3
		0,1,1,1,1,0,0,0,0,//活4 3
		0,0,0,0,1,1,1,1,0,//活4 3
		//中心线4连  两侧一位必须为0 √
		//共4种

		0,1,0,1,1,1,0,1,0,//双冲4_1 4
		1,0,1,1,1,0,1,0,0,//双冲4_1 4
		0,0,1,0,1,1,1,0,1,//双冲4_1 4
		//中心线3连  两侧两位必须为01 √
		1,1,0,1,1,0,1,1,0,//双冲4_2 4
		0,1,1,0,1,1,0,1,1,//双冲4_2 4
		//中心线2连  两侧必须为011 √
		1,1,1,0,1,0,1,1,1,//双冲4_3 4
		//中心线1连  两侧必须为0111 √
		//共6种

		0,0,0,0,1,1,1,1,2,//冲4_1 5
		0,0,0,1,1,1,1,2,0,//冲4_1 5
		0,0,1,1,1,1,2,0,0,//冲4_1 5
		0,1,1,1,1,2,0,0,0,//冲4_1 5
		2,1,1,1,1,0,0,0,0,//冲4_1 5
		0,2,1,1,1,1,0,0,0,//冲4_1 5
		0,0,2,1,1,1,1,0,0,//冲4_1 5
		0,0,0,2,1,1,1,1,0,//冲4_1 5
		//中心线4连  一侧必须为0，另一侧必须为2 √ 
		//共8种

		0,0,1,1,1,0,1,0,0,//冲4_2 6
		0,0,0,1,1,1,0,1,0,//冲4_2 6
		0,0,0,0,1,1,1,0,1,//冲4_2 6
		0,0,1,0,1,1,1,0,0,//冲4_2 6
		0,1,0,1,1,1,0,0,0,//冲4_2 6
		1,0,1,1,1,0,0,0,0,//冲4_2 6
		//中心线3连 一侧两位必须为0和1 √
		0,0,0,0,1,0,1,1,1,//冲4_2 6
		1,1,1,0,1,0,0,0,0,//冲4_2 6
		//中心线1连 一侧四位必须为0111 √
		//共8种

		0,0,0,0,1,1,0,1,1,//冲4_3 6
		0,0,0,1,1,0,1,1,0,//冲4_3 6
		0,1,1,0,1,1,0,0,0,//冲4_3 6
		1,1,0,1,1,0,0,0,0,//冲4_3 6
		//中心线2连  一侧三位必须为011√
		//共4种

		0,0,0,1,1,1,0,0,0,//活3 7
		0,0,0,0,1,1,1,0,0,//活3 7
		0,0,1,1,1,0,0,0,0,//活3 7
		//中心线3连  两侧必须为0 且两侧的第二位至少有一位是0√
		//共3种 

		0,0,1,0,1,1,0,0,0,//跳3 8
		0,1,0,1,1,0,0,0,0,//跳3 8
		0,0,0,1,1,0,1,0,0,//跳3 8
		0,0,0,0,1,1,0,1,0,//跳3 8
		//中心线2连 一侧必须为010 另一侧一位必须为0√
		0,1,1,0,1,0,0,0,0,//跳3 8
		0,0,0,0,1,0,1,1,0,//跳3 8
		//中心线1连 一侧必须为0110 另一侧一位必须为0 √
		//共6种

		0,0,0,2,1,1,1,0,0,//眠3_1 9
		0,0,2,1,1,1,0,0,0,//眠3_1 9
		0,2,1,1,1,0,0,0,0,//眠3_1 9
		0,0,1,1,1,2,0,0,0,//眠3_1 9
		0,0,0,1,1,1,2,0,0,//眠3_1 9
		0,0,0,0,1,1,1,2,0,//眠3_1 9
		//中心线3连 一侧必须为2 另一侧必须为00 √
		//共6种

		0,0,2,1,1,0,1,0,0,//眠3_2 9
		0,0,0,2,1,1,0,1,0,//眠3_2 9
		0,0,1,0,1,1,2,0,0,//眠3_2 9
		0,1,0,1,1,2,0,0,0,//眠3_2 9
		//中心线2连 一侧必须为2 另一侧必须为010 √
		2,1,1,0,1,0,0,0,0,//眠3_2 9
		0,0,0,0,1,0,1,1,2,//眠3_2 9
		//中心线1连 一侧必须为0112 另一侧必须为0 √
		//共6种

		0,0,0,1,1,0,1,2,0,//眠3_3 9
		0,0,0,0,1,1,0,1,2,//眠3_3 9
		0,2,1,0,1,1,0,0,0,//眠3_3 9
		2,1,0,1,1,0,0,0,0,//眠3_3 9
		//中心线2连 一侧必须为012 另一侧必须为0 √
		0,0,0,2,1,0,1,1,0,//眠3_3 9
		0,1,1,0,1,2,0,0,0,//眠3_3 9
		//中心线1连 一侧必须为2 另一侧必须为0110 √
		//共6种

		0,0,0,1,1,0,0,1,0,//眠3_4 9
		0,0,0,0,1,1,0,0,1,//眠3_4 9
		0,1,0,0,1,1,0,0,0,//眠3_4 9
		1,0,0,1,1,0,0,0,0,//眠3_4 9
		//中心线2连 一侧必须为001 √

		1,1,0,0,1,0,0,0,0,//眠3_4 9
		0,0,0,0,1,0,0,1,1,//眠3_4 9
		//中心线1连 一侧必须为0011 √
		//共6种

		0,0,1,0,1,0,1,0,0,//眠3_5 9
		1,0,1,0,1,0,0,0,0,//眠3_5 9
		0,0,0,0,1,0,1,0,1,//眠3_5 9
		//中心线1连 两侧必须为01 或者一侧必须为0101 √
		//共3种

		0,2,0,1,1,1,0,2,0,//眠3_6 9
		2,0,1,1,1,0,2,0,0,//眠3_6 9
		0,0,2,0,1,1,1,0,2,//眠3_6 9
		//中心线3连 两侧必须为02 √
		//共3种

		0,0,0,1,1,0,0,0,0,//活2 10
		0,0,0,0,1,1,0,0,0,//活2 10
		//中心线2连 两侧必须为00  √
		//共2种

		0,0,0,0,1,0,1,0,0,//跳2_1 11
		0,0,1,0,1,0,0,0,0,//跳2_1 11
		//中心线1连 一侧必须为010 一侧必须为0 √
		//共2种

		0,0,0,0,1,0,0,1,0,//跳2_2 11
		0,1,0,0,1,0,0,0,0,//跳2_2 11
		//中心线1连 一侧必须为0 另一侧必须为0010 √
		//共2种

		0,0,0,2,1,1,0,0,0,//眠2_1 12
		0,0,0,0,1,1,2,0,0,//眠2_1 12
		//中心线2连 一侧为2 另一侧为000 √
		//共2种

		0,0,0,2,1,0,1,0,0,//眠2_2 12
		0,0,1,0,1,2,0,0,0,//眠2_2 12
		//中心线1连 一侧为2 另一侧为0100 √
		//共2种

		0,0,0,2,1,0,0,1,0,//眠2_3 12
		0,1,0,0,1,2,0,0,0,//眠2_3 12
		//中心线1连 一侧为2 另一侧为0010 √
		//共2种

		0,0,0,0,1,0,0,0,1,//眠2_4 12
		1,0,0,0,1,0,0,0,0,//眠2_4 12
		//中心线1连 一侧为0001
		//共2种

	};


	for (int i = 0; i < 88; i++) {
		int result;
		result = rule.ChessTypeJudge(test[i]);
		cout << i + 1 << ":" << result << endl;
	}
	return 0;
}